import streamlit as st
import json
import os
from modules.translation import TranslationService
from modules.text_to_speech import TTSService
from modules.image_recognition import ImageRecognitionService
from modules.recipe_generator import RecipeGenerator
from modules.data_handler import DataHandler
from modules.accessibility import AccessibilityHelper
from utils.config import Config
from utils.constants import LANGUAGES, MENU_ITEMS

# Page configuration
st.set_page_config(
    page_title="Sahachari - Food & Culture Bridge",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize services
@st.cache_resource
def init_services():
    """Initialize all services with caching for better performance"""
    config = Config()
    data_handler = DataHandler(config.data_source)
    translation_service = TranslationService()
    tts_service = TTSService()
    image_service = ImageRecognitionService()
    recipe_generator = RecipeGenerator()
    accessibility_helper = AccessibilityHelper()
    
    return {
        'data_handler': data_handler,
        'translation': translation_service,
        'tts': tts_service,
        'image': image_service,
        'recipe_generator': recipe_generator,
        'accessibility': accessibility_helper
    }

def initialize_session_state():
    """Initialize session state variables"""
    if 'language' not in st.session_state:
        st.session_state.language = 'english'
    if 'current_recipe' not in st.session_state:
        st.session_state.current_recipe = None
    if 'search_results' not in st.session_state:
        st.session_state.search_results = []

def render_language_toggle():
    """Render language toggle in sidebar"""
    st.sidebar.markdown("---")
    st.sidebar.subheader("üåê Language / ‡∞≠‡∞æ‡∞∑")
    
    language_options = {
        'english': 'English',
        'telugu': '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å'
    }
    
    selected_language = st.sidebar.selectbox(
        "Select Language",
        options=list(language_options.keys()),
        format_func=lambda x: language_options[x],
        index=0 if st.session_state.language == 'english' else 1,
        key="language_selector"
    )
    
    if selected_language != st.session_state.language:
        st.session_state.language = selected_language
        st.rerun()

def get_localized_text(text_key, services):
    """Get localized text based on current language"""
    translations = {
        'app_title': {
            'english': 'Sahachari: Bilingual Food & Culture Companion',
            'telugu': '‡∞∏‡∞π‡∞ö‡∞æ‡∞∞‡∞ø: ‡∞¶‡±ç‡∞µ‡∞ø‡∞≠‡∞æ‡∞∑‡∞æ ‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø ‡∞∏‡∞π‡∞ö‡∞∞‡±Å‡∞°‡±Å'
        },
        'menu_recipes': {
            'english': 'üìñ Translate & Listen to Recipes',
            'telugu': 'üìñ ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞µ‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø'
        },
        'menu_ingredients': {
            'english': 'üì∑ Recognize Ingredients from Image',
            'telugu': 'üì∑ ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡∞®‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø'
        },
        'menu_generate': {
            'english': 'üç≥ Generate Dishes',
            'telugu': 'üç≥ ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø'
        },
        'menu_newspapers': {
            'english': 'üì∞ Explore Historic Newspapers',
            'telugu': 'üì∞ ‡∞ö‡∞æ‡∞∞‡∞ø‡∞§‡±ç‡∞∞‡∞ï ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞æ‡∞™‡∞§‡±ç‡∞∞‡∞ø‡∞ï‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±ç‡∞µ‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø'
        }
    }
    
    return translations.get(text_key, {}).get(st.session_state.language, text_key)

def render_recipe_module(services):
    """Render recipe translation and TTS module"""
    st.header(get_localized_text('menu_recipes', services))
    
    # Get recipes from data handler
    recipes = services['data_handler'].get_recipes()
    
    if not recipes:
        st.error("No recipes available. Please check your data source.")
        return
    
    # Recipe selection
    recipe_names = [recipe.get('name', f"Recipe {i+1}") for i, recipe in enumerate(recipes)]
    selected_recipe_idx = st.selectbox(
        "Select a recipe:" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
        range(len(recipe_names)),
        format_func=lambda x: recipe_names[x]
    )
    
    if selected_recipe_idx is not None:
        recipe = recipes[selected_recipe_idx]
        st.session_state.current_recipe = recipe
        
        # Display recipe
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Original" if st.session_state.language == 'english' else "‡∞Æ‡±Ç‡∞≤‡∞Ç")
            st.write(f"**Name:** {recipe.get('name', 'N/A')}")
            st.write(f"**Ingredients:** {recipe.get('ingredients', 'N/A')}")
            st.write(f"**Instructions:** {recipe.get('instructions', 'N/A')}")
            
            # TTS for original
            if st.button("üîä Listen (Original)" if st.session_state.language == 'english' else "üîä ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø (‡∞Æ‡±Ç‡∞≤‡∞Ç)"):
                try:
                    audio_file = services['tts'].generate_audio(
                        recipe.get('instructions', ''), 
                        'en' if recipe.get('language', 'english') == 'english' else 'te'
                    )
                    if audio_file:
                        st.audio(audio_file)
                except Exception as e:
                    st.error(f"Audio generation failed: {str(e)}")
        
        with col2:
            st.subheader("Translation" if st.session_state.language == 'english' else "‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶‡∞Ç")
            
            target_lang = 'te' if st.session_state.language == 'english' else 'en'
            
            try:
                translated_name = services['translation'].translate_text(recipe.get('name', ''), target_lang)
                translated_ingredients = services['translation'].translate_text(recipe.get('ingredients', ''), target_lang)
                translated_instructions = services['translation'].translate_text(recipe.get('instructions', ''), target_lang)
                
                st.write(f"**Name:** {translated_name}")
                st.write(f"**Ingredients:** {translated_ingredients}")
                st.write(f"**Instructions:** {translated_instructions}")
                
                # TTS for translation
                if st.button("üîä Listen (Translation)" if st.session_state.language == 'english' else "üîä ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø (‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶‡∞Ç)"):
                    try:
                        audio_file = services['tts'].generate_audio(translated_instructions, target_lang)
                        if audio_file:
                            st.audio(audio_file)
                    except Exception as e:
                        st.error(f"Audio generation failed: {str(e)}")
                        
            except Exception as e:
                st.error(f"Translation failed: {str(e)}")

def render_ingredient_recognition(services):
    """Render ingredient recognition module"""
    st.header(get_localized_text('menu_ingredients', services))
    
    uploaded_file = st.file_uploader(
        "Upload a food image:" if st.session_state.language == 'english' else "‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:",
        type=['jpg', 'png', 'jpeg'],
        help="Upload an image to identify ingredients"
    )
    
    if uploaded_file is not None:
        # Display uploaded image
        st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)
        
        # Process image
        with st.spinner("Analyzing image..." if st.session_state.language == 'english' else "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø..."):
            try:
                ingredients = services['image'].identify_ingredients(uploaded_file)
                
                if ingredients:
                    st.success("Ingredients identified!" if st.session_state.language == 'english' else "‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø!")
                    
                    # Display identified ingredients
                    st.subheader("Identified Ingredients:" if st.session_state.language == 'english' else "‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡±Å:")
                    
                    for ingredient in ingredients:
                        confidence = ingredient.get('confidence', 0)
                        name = ingredient.get('name', 'Unknown')
                        
                        # Translate ingredient name if needed
                        if st.session_state.language == 'telugu':
                            try:
                                name = services['translation'].translate_text(name, 'te')
                            except:
                                pass  # Keep original if translation fails
                        
                        st.write(f"‚Ä¢ {name} (Confidence: {confidence:.2f})")
                    
                    # Suggest recipes based on ingredients
                    if st.button("Suggest Recipes" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø"):
                        ingredient_names = [ing.get('name', '') for ing in ingredients]
                        suggested_recipes = services['recipe_generator'].suggest_recipes(ingredient_names)
                        
                        if suggested_recipes:
                            st.subheader("Suggested Recipes:" if st.session_state.language == 'english' else "‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å:")
                            for recipe in suggested_recipes:
                                st.write(f"‚Ä¢ {recipe}")
                        else:
                            st.info("No recipes found for these ingredients." if st.session_state.language == 'english' else "‡∞à ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡∞ï‡±Å ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.")
                else:
                    st.warning("No ingredients could be identified in the image." if st.session_state.language == 'english' else "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç‡∞≤‡±ã ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.")
                    
            except Exception as e:
                st.error(f"Image analysis failed: {str(e)}")

def render_recipe_generator(services):
    """Render recipe generation module"""
    st.header(get_localized_text('menu_generate', services))
    
    # Input method selection
    input_method = st.radio(
        "Choose input method:" if st.session_state.language == 'english' else "‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
        ["Ingredients List", "Recipe Type"],
        format_func=lambda x: x if st.session_state.language == 'english' else 
                    ("‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤ ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ" if x == "Ingredients List" else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡∞ï‡∞Ç")
    )
    
    if input_method == "Ingredients List":
        ingredients_input = st.text_area(
            "Enter available ingredients (comma-separated):" if st.session_state.language == 'english' else 
            "‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (‡∞ï‡∞æ‡∞Æ‡∞æ‡∞§‡±ã ‡∞µ‡±á‡∞∞‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞®):",
            placeholder="tomato, onion, rice, chicken..." if st.session_state.language == 'english' else 
                       "‡∞ü‡∞Æ‡∞æ‡∞ü‡∞æ, ‡∞â‡∞≤‡±ç‡∞≤‡∞ø‡∞™‡∞æ‡∞Ø, ‡∞Ö‡∞®‡±ç‡∞®‡∞Ç, ‡∞ö‡∞ø‡∞ï‡±Ü‡∞®‡±ç..."
        )
        
        if ingredients_input and st.button("Generate Recipes" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø"):
            ingredients = [ing.strip() for ing in ingredients_input.split(',')]
            
            with st.spinner("Generating recipes..." if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø..."):
                try:
                    recipes = services['recipe_generator'].generate_from_ingredients(ingredients)
                    
                    if recipes:
                        st.success(f"Generated {len(recipes)} recipes!" if st.session_state.language == 'english' else f"{len(recipes)} ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø!")
                        
                        for i, recipe in enumerate(recipes, 1):
                            with st.expander(f"Recipe {i}: {recipe.get('name', 'Unnamed')}" if st.session_state.language == 'english' else f"‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç {i}: {recipe.get('name', '‡∞™‡±á‡∞∞‡±Å‡∞≤‡±á‡∞®‡∞ø')}"):
                                st.write(f"**Ingredients:** {recipe.get('ingredients', 'N/A')}")
                                st.write(f"**Instructions:** {recipe.get('instructions', 'N/A')}")
                                st.write(f"**Cooking Time:** {recipe.get('cooking_time', 'N/A')}")
                    else:
                        st.info("No recipes could be generated with the provided ingredients." if st.session_state.language == 'english' else "‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞æ‡∞≤‡∞§‡±ã ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞æ‡∞≤‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.")
                        
                except Exception as e:
                    st.error(f"Recipe generation failed: {str(e)}")
    
    else:  # Recipe Type
        recipe_type = st.selectbox(
            "Select recipe type:" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
            ["Traditional", "Modern", "Fusion", "Healthy", "Quick"],
            format_func=lambda x: {
                "Traditional": "‡∞∏‡∞æ‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø" if st.session_state.language == 'telugu' else "Traditional",
                "Modern": "‡∞Ü‡∞ß‡±Å‡∞®‡∞ø‡∞ï" if st.session_state.language == 'telugu' else "Modern",
                "Fusion": "‡∞Æ‡∞ø‡∞∂‡±ç‡∞∞‡∞Æ" if st.session_state.language == 'telugu' else "Fusion",
                "Healthy": "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞ï‡∞∞‡∞Æ‡±à‡∞®" if st.session_state.language == 'telugu' else "Healthy",
                "Quick": "‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§" if st.session_state.language == 'telugu' else "Quick"
            }.get(x, x)
        )
        
        if st.button("Generate Recipe" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø"):
            with st.spinner("Generating recipe..." if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø..."):
                try:
                    recipe = services['recipe_generator'].generate_by_type(recipe_type)
                    
                    if recipe:
                        st.success("Recipe generated!" if st.session_state.language == 'english' else "‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
                        
                        st.subheader(recipe.get('name', 'Generated Recipe'))
                        st.write(f"**Type:** {recipe.get('type', 'N/A')}")
                        st.write(f"**Ingredients:** {recipe.get('ingredients', 'N/A')}")
                        st.write(f"**Instructions:** {recipe.get('instructions', 'N/A')}")
                        st.write(f"**Cooking Time:** {recipe.get('cooking_time', 'N/A')}")
                        st.write(f"**Difficulty:** {recipe.get('difficulty', 'N/A')}")
                    else:
                        st.info("Could not generate a recipe of this type." if st.session_state.language == 'english' else "‡∞à ‡∞∞‡∞ï‡∞Æ‡±à‡∞® ‡∞µ‡∞Ç‡∞ü‡∞ï‡∞Ç ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.")
                        
                except Exception as e:
                    st.error(f"Recipe generation failed: {str(e)}")

def render_historic_newspapers(services):
    """Render historic newspapers module"""
    st.header(get_localized_text('menu_newspapers', services))
    
    # Search functionality
    search_query = st.text_input(
        "Search historic content:" if st.session_state.language == 'english' else "‡∞ö‡∞æ‡∞∞‡∞ø‡∞§‡±ç‡∞∞‡∞ï ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞µ‡±Ü‡∞§‡∞ï‡∞Ç‡∞°‡∞ø:",
        placeholder="Enter keywords..." if st.session_state.language == 'english' else "‡∞ï‡±Ä‡∞≤‡∞ï ‡∞™‡∞¶‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø..."
    )
    
    col1, col2 = st.columns([3, 1])
    with col1:
        if search_query and st.button("Search" if st.session_state.language == 'english' else "‡∞µ‡±Ü‡∞§‡∞ï‡∞Ç‡∞°‡∞ø"):
            with st.spinner("Searching..." if st.session_state.language == 'english' else "‡∞µ‡±Ü‡∞§‡±Å‡∞ï‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø..."):
                try:
                    results = services['data_handler'].search_newspapers(search_query)
                    st.session_state.search_results = results
                except Exception as e:
                    st.error(f"Search failed: {str(e)}")
    
    with col2:
        if st.button("Show All" if st.session_state.language == 'english' else "‡∞Ö‡∞®‡±ç‡∞®‡±Ä ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞ö‡±Å"):
            try:
                st.session_state.search_results = services['data_handler'].get_newspapers()
            except Exception as e:
                st.error(f"Failed to load newspapers: {str(e)}")
    
    # Display results
    if st.session_state.search_results:
        st.subheader(f"Found {len(st.session_state.search_results)} articles" if st.session_state.language == 'english' else f"{len(st.session_state.search_results)} ‡∞µ‡±ç‡∞Ø‡∞æ‡∞∏‡∞æ‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø")
        
        for article in st.session_state.search_results:
            with st.expander(f"{article.get('title', 'Untitled')} - {article.get('date', 'No date')}"):
                st.write(f"**Source:** {article.get('source', 'Unknown')}")
                st.write(f"**Date:** {article.get('date', 'Unknown')}")
                st.write(f"**Content:** {article.get('content', 'No content available')}")
                
                # Translation option
                if st.button(f"Translate", key=f"translate_{article.get('id', 'unknown')}"):
                    target_lang = 'te' if st.session_state.language == 'english' else 'en'
                    try:
                        translated_content = services['translation'].translate_text(
                            article.get('content', ''), target_lang
                        )
                        st.write(f"**Translation:** {translated_content}")
                    except Exception as e:
                        st.error(f"Translation failed: {str(e)}")
    else:
        st.info("No articles found. Try a different search term or load all articles." if st.session_state.language == 'english' else "‡∞µ‡±ç‡∞Ø‡∞æ‡∞∏‡∞æ‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å. ‡∞µ‡±á‡∞∞‡±á ‡∞µ‡±Ü‡∞§‡±Å‡∞ï‡±Å ‡∞™‡∞¶‡∞Ç ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡±ç‡∞Ø‡∞æ‡∞∏‡∞æ‡∞≤‡∞®‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")

def main():
    """Main application function"""
    # Initialize session state
    initialize_session_state()
    
    # Initialize services
    services = init_services()
    
    # Render language toggle
    render_language_toggle()
    
    # Main title
    st.title(get_localized_text('app_title', services))
    
    # Accessibility notice
    services['accessibility'].render_accessibility_notice(st.session_state.language)
    
    # Menu selection
    menu_options = [
        get_localized_text('menu_recipes', services),
        get_localized_text('menu_ingredients', services),
        get_localized_text('menu_generate', services),
        get_localized_text('menu_newspapers', services)
    ]
    
    selected_menu = st.sidebar.selectbox(
        "Choose Feature:" if st.session_state.language == 'english' else "‡∞´‡±Ä‡∞ö‡∞∞‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
        menu_options
    )
    
    # Render selected module
    if selected_menu == get_localized_text('menu_recipes', services):
        render_recipe_module(services)
    elif selected_menu == get_localized_text('menu_ingredients', services):
        render_ingredient_recognition(services)
    elif selected_menu == get_localized_text('menu_generate', services):
        render_recipe_generator(services)
    elif selected_menu == get_localized_text('menu_newspapers', services):
        render_historic_newspapers(services)
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown(
        "üçΩÔ∏è **Sahachari** - Bridging Food & Culture" if st.session_state.language == 'english' else 
        "üçΩÔ∏è **‡∞∏‡∞π‡∞ö‡∞æ‡∞∞‡∞ø** - ‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞®‡∞ø ‡∞ï‡∞≤‡±Å‡∞™‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø"
    )

if __name__ == "__main__":
    main()
